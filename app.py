# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oSpQrI7_QcZLBd1ttPsi6MkCSXCT6k5x
"""

# --- FINAL UPDATED app.py for FitBites Ghanaian Meal Generator ---

import streamlit as st
import pandas as pd
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
import json
from openai import OpenAI

# --- PAGE CONFIG ---
st.set_page_config(page_title="FitBites | Personalized Meal Plan", layout="wide")

# --- SETTINGS ---
openai_api_key = "YOUR_OPENAI_API_KEY_HERE"   # Insert your actual OpenAI API key

# --- LOAD DATA ---
@st.cache_data
def load_data():
    df = pd.read_csv('gh_food_nutritional_values.csv')
    df['Food'] = df['Food'].str.strip().str.lower()
    cols = ['Protein(g)', 'Fat(g)', 'Carbs(g)', 'Calories(100g)', 'Water(g)', 'SFA(100g)', 'MUFA(100g)', 'PUFA(100g)']
    df[cols] = df[cols].fillna(df[cols].mean())
    return df, cols

df, nutritional_columns = load_data()

# --- NEURAL NETWORK ---
class FoodAutoencoder(nn.Module):
    def __init__(self, input_dim, embedding_dim=16):
        super(FoodAutoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(input_dim, 32),
            nn.ReLU(),
            nn.Linear(32, embedding_dim)
        )
        self.decoder = nn.Sequential(
            nn.Linear(embedding_dim, 32),
            nn.ReLU(),
            nn.Linear(32, input_dim)
        )

    def forward(self, x):
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        return encoded, decoded

@st.cache_resource
def train_model(X):
    model = FoodAutoencoder(input_dim=X.shape[1])
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    criterion = nn.MSELoss()
    X_tensor = torch.tensor(X, dtype=torch.float32)
    for epoch in range(300):
        optimizer.zero_grad()
        embeddings, outputs = model(X_tensor)
        loss = criterion(outputs, X_tensor)
        loss.backward()
        optimizer.step()
    with torch.no_grad():
        food_embeddings = model.encoder(X_tensor).numpy()
    return food_embeddings

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[nutritional_columns])
food_embeddings = train_model(X_scaled)

# --- RECOMMEND FOODS FUNCTION ---
def recommend_food_nn(food_name, dataset, embeddings, top_n=5):
    dataset['Food'] = dataset['Food'].str.lower()
    food_name = food_name.lower()
    idx = dataset[dataset['Food'] == food_name].index[0]
    vec = embeddings[idx].reshape(1, -1)
    sims = cosine_similarity(vec, embeddings).flatten()
    recommended_idx = sims.argsort()[::-1][1:top_n+1]
    return dataset.iloc[recommended_idx]['Food'].tolist()

# --- BMI, TDEE CALCULATION ---
def calculate_bmi(weight, height_cm):
    return weight / (height_cm/100)**2

def calculate_tdee(weight, height, age, sex, activity_level):
    if sex == 'male':
        bmr = 10*weight + 6.25*height - 5*age + 5
    else:
        bmr = 10*weight + 6.25*height - 5*age - 161
    multipliers = {'sedentary':1.2, 'light':1.375, 'moderate':1.55, 'active':1.725, 'superactive':1.9}
    return bmr * multipliers[activity_level]

# --- OPENAI-POWERED MEAL GENERATION ---
def call_openai_for_mealplan(initial_plan, target_calories, bmi, weeks_to_goal):
    food_table = df[['Food', 'Calories(100g)', 'Protein(g)', 'Fat(g)', 'Carbs(g)', 'Category']].to_dict(orient='records')

    system_msg = (
        "You are a professional Ghanaian dietitian. Build 7-day realistic Ghanaian meal plans with portions in ladles, scoops, cups, handfuls. "
        "Daily calories MUST stay within user target. Meals must balance carbs, protein, and fat."
    )

    user_msg = {
        "context": {
            "daily_target_calories": target_calories,
            "bmi": bmi,
            "weeks_to_goal": weeks_to_goal
        },
        "model_recommendations": initial_plan,
        "full_food_table": food_table
    }

    client = OpenAI(api_key=openai_api_key)
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.3,
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": json.dumps(user_msg)}
        ]
    )

    content = response.choices[0].message.content.strip()
    start_idx = content.find('{')
    content = content[start_idx:] if start_idx != -1 else content
    plan_json = json.loads(content)
    return plan_json

# --- STREAMLIT SIDEBAR ---
st.sidebar.header("üí™ User Information")
weight = st.sidebar.number_input("Current Weight (kg)", 30, 200, 90)
target_weight = st.sidebar.number_input("Target Weight (kg)", 30, 200, 75)
height = st.sidebar.number_input("Height (cm)", 120, 250, 160)
age = st.sidebar.number_input("Age", 10, 100, 25)
sex = st.sidebar.selectbox("Sex", ['female', 'male'])
activity_level = st.sidebar.selectbox("Activity Level", ['sedentary', 'light', 'moderate', 'active', 'superactive'])

st.sidebar.subheader("üçΩÔ∏è Choose Foods You Like")
breakfast = st.sidebar.multiselect("Breakfast", df['Food'].unique())
lunch = st.sidebar.multiselect("Lunch", df['Food'].unique())
dinner = st.sidebar.multiselect("Dinner", df['Food'].unique())

# --- MAIN BODY ---
st.title("üçõ Welcome to FitBites | Personalized Meal Plans for Your Journey")
st.write("üëã Please input your details and food preferences to get started!")

if st.sidebar.button("‚ú® Generate Meal Plan") or "openai_plan" not in st.session_state:
    bmi = calculate_bmi(weight, height)
    tdee = calculate_tdee(weight, height, age, sex, activity_level)
    calorie_deficit = 500
    target_calories = tdee - calorie_deficit
    weeks_to_goal = int(np.round((weight - target_weight) / 0.5))

    st.session_state.user_context = {
        "weight": weight, "target_weight": target_weight, "height": height,
        "bmi": bmi, "tdee": tdee, "target_calories": target_calories, "weeks": weeks_to_goal
    }

    # Build initial starter foods
    preferences = {
        'breakfast': breakfast,
        'lunch': lunch,
        'dinner': dinner
    }
    initial_plan = []
    for meal_type, foods in preferences.items():
        for food in foods:
            initial_plan += recommend_food_nn(food, df, food_embeddings, top_n=5)

    # CALL OpenAI API
    openai_plan = call_openai_for_mealplan(initial_plan, target_calories, bmi, weeks_to_goal)
    st.session_state.openai_plan = openai_plan

# --- DISPLAY PLAN ---
if "openai_plan" in st.session_state:
    st.subheader("üìã Your Personalized Meal Plan")
    plan_df = pd.DataFrame.from_dict(st.session_state.openai_plan, orient='index')
    st.dataframe(plan_df, use_container_width=True)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÑ Reshuffle Plan"):
            del st.session_state.openai_plan
            st.rerun()

    with col2:
        if st.button("‚è© Next Week Plan"):
            del st.session_state.openai_plan
            st.rerun()

    # Motivational Quote
    st.success("‚ú® \"Consistency is harder when no one is clapping for you. Stay consistent.\" ‚ú®")

# --- END OF APP ---